import{_ as s,o as n,c as e,H as t}from"./app.28a7effe.js";const i={};function p(l,a){return n(),e("div",null,a[0]||(a[0]=[t(`<h2 id="\u4ECA\u65E5\u9AD8\u94C1\u51FA\u884C" tabindex="-1"><a class="header-anchor" href="#\u4ECA\u65E5\u9AD8\u94C1\u51FA\u884C" aria-hidden="true">#</a> \u4ECA\u65E5\u9AD8\u94C1\u51FA\u884C</h2><h3 id="\u770B\u770Btypescript" tabindex="-1"><a class="header-anchor" href="#\u770B\u770Btypescript" aria-hidden="true">#</a> \u770B\u770Btypescript</h3><ul><li>annotation \u6CE8\u91CA</li></ul><h4 id="null-check" tabindex="-1"><a class="header-anchor" href="#null-check" aria-hidden="true">#</a> null check</h4><figure><blockquote><p> I call it my billion-dollar mistake. It was the invention of the null reference in 1965\u2026 This has led to innumerable errors, vulnerabilities, and system crashes, which have probably caused a billion dollars of pain and damage in the last 40 years. </p></blockquote><figcaption>\u2014Tony Hoare, 2009</figcaption></figure><p><strong>strictNullCheck</strong></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> firstName<span class="token operator">:</span><span class="token builtin">string</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Here, biologist is of type false | string, and while it can be narrowed down to just string in the if statement body, the else statement body knows it can still be a string if it\u2019s &quot;&quot;:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">let</span> biologist <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0.5</span> <span class="token operator">&amp;&amp;</span> <span class="token string">&quot;Rachel Carson&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>biologist<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    biologist<span class="token punctuation">;</span> <span class="token comment">// Type: string</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    biologist<span class="token punctuation">;</span> <span class="token comment">// Type: false | string</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="variables-without-initial-values" tabindex="-1"><a class="header-anchor" href="#variables-without-initial-values" aria-hidden="true">#</a> variables without initial values</h4><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">let</span> x <span class="token operator">:</span><span class="token builtin">string</span><span class="token operator">|</span><span class="token keyword">undefined</span> <span class="token punctuation">;</span>
x<span class="token punctuation">.</span>length <span class="token comment">// error , variables is used before asigned</span>
x<span class="token operator">?.</span>length <span class="token comment">//ok</span>
x <span class="token operator">=</span> <span class="token string">&quot;x&quot;</span><span class="token punctuation">;</span>
x<span class="token punctuation">.</span>length <span class="token comment">// 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u7C7B\u578B\u522B\u540D-type-alias" tabindex="-1"><a class="header-anchor" href="#\u7C7B\u578B\u522B\u540D-type-alias" aria-hidden="true">#</a> \u7C7B\u578B\u522B\u540D type alias</h3><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">RawData</span> <span class="token operator">=</span> <span class="token builtin">boolean</span> <span class="token operator">|</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> rawDataFirst<span class="token operator">:</span> RawData<span class="token punctuation">;</span>
<span class="token keyword">let</span> rawDataSecond<span class="token operator">:</span> RawData<span class="token punctuation">;</span>
<span class="token keyword">let</span> rawDataThird<span class="token operator">:</span> RawData<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>\u7C7B\u578B\u522B\u540D\u53EA\u6709\u5728\u7F16\u8BD1\u6210js\u4E4B\u524D\u7684ts\u6587\u4EF6\u4E2D\u5B58\u5728</li></ul><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">someType</span> <span class="token operator">=</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>someType<span class="token punctuation">)</span> <span class="token comment">//error</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="\u8054\u5408\u7C7B\u578B\u522B\u540D-combine-type-alias" tabindex="-1"><a class="header-anchor" href="#\u8054\u5408\u7C7B\u578B\u522B\u540D-combine-type-alias" aria-hidden="true">#</a> \u8054\u5408\u7C7B\u578B\u522B\u540D combine type alias</h4><p>.... \u4ECA\u5929\u5750\u8F66\uFF0C\u5C31\u5148\u770B\u5230\u8FD9\u5427</p><h3 id="\u603B\u7ED3" tabindex="-1"><a class="header-anchor" href="#\u603B\u7ED3" aria-hidden="true">#</a> \u603B\u7ED3</h3><p>\u505A\u4E86\u4E00\u5929\u8F66\uFF0C\u7D2F\u4E86</p><ul><li>\u770B\u4E86\u534A\u5929ts\u4E66</li></ul><h3 id="\u660E\u65E5\u76EE\u6807" tabindex="-1"><a class="header-anchor" href="#\u660E\u65E5\u76EE\u6807" aria-hidden="true">#</a> \u660E\u65E5\u76EE\u6807</h3><ul><li>[] 11:00-12:00 typescript</li><li>[] 15:00-16:00 vue3\u54CD\u5E94\u5F0F\u539F\u7406\u770B\u5B8C</li><li>[] 16:30-17:30 \u82F1\u8BED</li></ul>`,22)]))}var c=s(i,[["render",p],["__file","20230709.html.vue"]]);export{c as default};
//# sourceMappingURL=20230709.html.410ef64e.js.map

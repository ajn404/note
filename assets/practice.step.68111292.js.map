{"version":3,"file":"practice.step.68111292.js","sources":["../../../components/glsl/practice.step.vue"],"sourcesContent":["<template>\n    <div class=\"practice fullscreen\" ref=\"container\">\n    </div>\n</template>\n\n<script lang=\"ts\" setup>\nimport Sketch from \"@scripts/practice.setup.ts\";\nimport * as THREE from \"three\";\nimport { ref, nextTick, onUnmounted, reactive } from \"vue\";\n\n// import shader\nimport fs from '@shaders/practice/usingStepDrawCircle/fragment.glsl'\nimport vs from '@shaders/practice/usingStepDrawCircle/vertex.glsl'\nimport squareFs from '@shaders/practice/usingStepDrawSquare/fragment.glsl'\nimport squareVs from '@shaders/practice/usingStepDrawSquare/vertex.glsl'\n\nimport uTimeFs from '@shaders/practice/usingStepDrawSquare/fragment_utime.glsl'\nimport neoBFs from '@shaders/examples/neoBridge/fr.glsl';\n//@shaders/practice/usingTiling/\nimport tilingFs from '@shaders/practice/usingTiling/fragment.glsl'\nimport tilingVs from '@shaders/practice/usingTiling/vertex.glsl'\n\nconst props = defineProps({\n    type: String\n});\n\nlet fragmentShader: string = fs, vertexShader: string = vs;\nswitch (props.type) {\n    case 'Square': {\n        fragmentShader = squareFs;\n        vertexShader = squareVs;\n        break;\n    }\n    case 'utime': {\n        fragmentShader = uTimeFs;\n        break;\n    }\n\n    case 'tiling': {\n        fragmentShader = tilingFs;\n        vertexShader = tilingVs;\n        break;\n    }\n\n    case 'neob': {\n        fragmentShader = neoBFs;\n        vertexShader = tilingVs;\n        break;\n    }\n}\n\nconst container = ref(null);\nconst uniforms = reactive({\n\n    u_time: { value: 0.0 },\n    u_mouse: {\n        value: {\n            x: 0.0,\n            y: 0.0\n        }\n    },\n    u_resolution: {\n        value: {\n            x: 0.0,\n            y: 0.0\n        }\n    },\n    u_color: {\n        value: new THREE.Color(0x00fff0)\n    },\n    u_frame: {\n        type: \"i\",\n        value: -1.\n    },\n    iChannel0: { type: 't', value: '' },\n    iChannel1: { type: 't', value: '' },\n});\n\nconst clock = new THREE.Clock();\n\nlet sketch = new Sketch();\n\nsketch.animate = function () {\n    // this.mesh.rotation.x += this.time / 1000;\n    // this.mesh.rotation.y += this.time / 1000;\n    this.render();\n    uniforms.u_time.value = clock.getElapsedTime();\n    uniforms.u_frame.value++;\n    if (this.container.getBoundingClientRect().width > 0)\n        requestAnimationFrame(this.animate.bind(this));\n    else return;\n};\nsketch.move = function (evt: any) {\n    uniforms.u_mouse.value.x = evt.touches ? evt.touches[0].clientX : evt.clientX;\n    uniforms.u_mouse.value.y = evt.touches ? evt.touches[0].clientY : evt.clientY;\n};\n\nif ('ontouchstart' in window) {\n    document.addEventListener('touchmove', sketch.move);\n} else {\n    document.addEventListener('mousemove', sketch.move);\n}\n\nsketch.resize = function () {\n    if (uniforms.u_resolution !== undefined) {\n        uniforms.u_resolution.value.x = this.width;\n        uniforms.u_resolution.value.y = this.height;\n    }\n    uniforms.u_frame.value = 0;\n    this.camera.aspect = this.container.clientWidth / this.container.clientHeight;\n    this.camera.updateProjectionMatrix();\n    this.renderer.setSize(this.container.clientWidth, this.container.clientHeight);\n    this.render();\n}\n\n\nnextTick(() => {\n    console.log(fragmentShader,typeof fragmentShader);\n    \n    const options = {\n        container: container.value || document.body\n    };\n    sketch.addObject = function () {\n        this.geometry = new THREE.PlaneGeometry(2, 2);\n        this.material = new THREE.ShaderMaterial(\n            {\n                uniforms: uniforms,\n                side: THREE.DoubleSide,\n\n                fragmentShader: fragmentShader,\n                vertexShader: vertexShader,\n            }\n        );\n        this.mesh = new THREE.Mesh(this.geometry, this.material);\n        this.scene.add(this.mesh);\n    }\n    sketch.init(options);\n    sketch.camera.position.z = 0.52;\n})\n\n\nonUnmounted(() => {\n    sketch.beforeDestroy();\n})\n\n</script>"],"names":["props","__props","fragmentShader","fs","vertexShader","vs","squareFs","squareVs","uTimeFs","tilingFs","tilingVs","neoBFs","container","ref","uniforms","reactive","THREE.Color","clock","THREE.Clock","sketch","Sketch","evt","nextTick","options","THREE.PlaneGeometry","THREE.ShaderMaterial","THREE.DoubleSide","THREE.Mesh","onUnmounted"],"mappings":";;;;;;;;;;k7EAsBA,MAAAA,EAAAC,EAIA,IAAAC,EAAAC,EAAAC,EAAAC,EACA,OAAAL,EAAA,UAAc,SAAA,CAENE,EAAAI,EACAF,EAAAG,EACA,KAAA,KACJ,QAAA,CAEIL,EAAAM,EACA,KAAA,KACJ,SAAA,CAGIN,EAAAO,EACAL,EAAAM,EACA,KAAA,KACJ,OAAA,CAGIR,EAAAS,EACAP,EAAAM,EACA,KAAA,EAIR,MAAAE,EAAAC,EAAA,IAAA,EACAC,EAAAC,EAAA,CAA0B,OAAA,CAAA,MAAA,CAAA,EAED,QAAA,CACZ,MAAA,CACE,EAAA,EACA,EAAA,CACA,CACP,EACJ,aAAA,CACc,MAAA,CACH,EAAA,EACA,EAAA,CACA,CACP,EACJ,QAAA,CACS,MAAA,IAAAC,EAAA,KAAA,CAC0B,EACnC,QAAA,CACS,KAAA,IACC,MAAA,EACC,EACX,UAAA,CAAA,KAAA,IAAA,MAAA,EAAA,EACkC,UAAA,CAAA,KAAA,IAAA,MAAA,EAAA,CACA,CAAA,EAGtCC,EAAA,IAAAC,EAEA,IAAAC,EAAA,IAAAC,EAEA,OAAAD,EAAA,QAAA,UAAA,CAMI,GAHA,KAAA,OAAA,EACAL,EAAA,OAAA,MAAAG,EAAA,eAAA,EACAH,EAAA,QAAA,QACA,KAAA,UAAA,sBAAA,EAAA,MAAA,EACI,sBAAA,KAAA,QAAA,KAAA,IAAA,CAAA,MACC,OAAA,EAETK,EAAA,KAAA,SAAAE,EAAA,CACIP,EAAA,QAAA,MAAA,EAAAO,EAAA,QAAAA,EAAA,QAAA,GAAA,QAAAA,EAAA,QACAP,EAAA,QAAA,MAAA,EAAAO,EAAA,QAAAA,EAAA,QAAA,GAAA,QAAAA,EAAA,OAAsE,EAG1E,iBAAA,OACI,SAAA,iBAAA,YAAAF,EAAA,IAAA,EAEA,SAAA,iBAAA,YAAAA,EAAA,IAAA,EAGJA,EAAA,OAAA,UAAA,CACIL,EAAA,eAAA,SACIA,EAAA,aAAA,MAAA,EAAA,KAAA,MACAA,EAAA,aAAA,MAAA,EAAA,KAAA,QAEJA,EAAA,QAAA,MAAA,EACA,KAAA,OAAA,OAAA,KAAA,UAAA,YAAA,KAAA,UAAA,aACA,KAAA,OAAA,yBACA,KAAA,SAAA,QAAA,KAAA,UAAA,YAAA,KAAA,UAAA,YAAA,EACA,KAAA,OAAA,CAAY,EAIhBQ,EAAA,IAAA,CACI,QAAA,IAAApB,EAAA,OAAAA,CAAA,EAEA,MAAAqB,EAAA,CAAgB,UAAAX,EAAA,OAAA,SAAA,IAC2B,EAE3CO,EAAA,UAAA,UAAA,CACI,KAAA,SAAA,IAAAK,EAAA,EAAA,CAAA,EACA,KAAA,SAAA,IAAAC,EAA0B,CACtB,SAAAX,EACI,KAAAY,EACY,eAAAxB,EAEZ,aAAAE,CACA,CACJ,EAEJ,KAAA,KAAA,IAAAuB,EAAA,KAAA,SAAA,KAAA,QAAA,EACA,KAAA,MAAA,IAAA,KAAA,IAAA,CAAwB,EAE5BR,EAAA,KAAAI,CAAA,EACAJ,EAAA,OAAA,SAAA,EAAA,GAA2B,CAAA,EAI/BS,EAAA,IAAA,CACIT,EAAA,cAAA,CAAqB,CAAA"}
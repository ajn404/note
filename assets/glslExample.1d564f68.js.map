{"version":3,"file":"glslExample.1d564f68.js","sources":["../../../components/glsl/glslExample.vue"],"sourcesContent":["\n\n<template>\n    <div class=\"example_lightSaberDuel fullscreen\" ref=\"container\">\n    </div>\n</template>\n\n<script lang=\"ts\" setup>\n//@ts-nocheck  these glsl file\nimport Sketch from \"@scripts/practice.setup.ts\";\nimport * as THREE from \"three\";\nimport { ref, nextTick, onUnmounted } from \"vue\";\n\nimport ikunFs from '@shaders/examples/shaderToy/lightSaberDuel/fragment.glsl'\nimport ikunVs from '@shaders/examples/shaderToy/lightSaberDuel/vertex.glsl'\nimport waveFs from '@shaders/examples/shaderToy/wavePrint/fragment.glsl'\nimport waveVs from '@shaders/examples/shaderToy/wavePrint/vertex.glsl'\nimport cityFs from '@shaders/examples/shaderToy/fractalCity/fragment.glsl'\nimport cityVs from '@shaders/examples/shaderToy/fractalCity/vertex.glsl'\nimport priFs from '@shaders/examples/shaderToy/primitives/fragment.glsl'\nimport priVs from '@shaders/examples/shaderToy/primitives/vertex.glsl'\n//simpleTruchetPattern\nimport stpFs from '@shaders/examples/shaderToy/simpleTruchetPattern/fragment.glsl'\nimport stpVs from '@shaders/examples/shaderToy/simpleTruchetPattern/vertex.glsl'\n//simpleTruchetPattern\nimport edFs from '@shaders/examples/shaderToy/ed209/fragment.glsl'\nimport edVs from '@shaders/examples/shaderToy/ed209/vertex.glsl'\n\nimport inFs from '@shaders/examples/inderciaIntendedOne/fr.glsl'\n\nconst props = defineProps({\n    type: String\n});\n\nlet fragmentShader: string = '', vertexShader: string = '';\n\nlet doRotate = true, geometryX = 6, geometryY = 5;\nswitch (props.type) {\n    default: {\n        fragmentShader = ikunFs;\n        vertexShader = ikunVs;\n        break;\n    }\n    case 'ikun': {\n        fragmentShader = ikunFs;\n        vertexShader = ikunVs;\n        break;\n    }\n\n    case 'wave': {\n        fragmentShader = waveFs;\n        vertexShader = waveVs;\n        break;\n    }\n\n    case 'fractalCity': {\n        fragmentShader = cityFs;\n        vertexShader = cityVs;\n        doRotate = false;\n        geometryY = 2;\n        break;\n    }\n    case 'primitives': {\n        fragmentShader = priFs;\n        vertexShader = priVs;\n        doRotate = false;\n        geometryX = 1.92;\n        geometryY = 1.08;\n        break;\n    }\n    case 'simpleTruchetPattern': {\n        fragmentShader = stpFs;\n        vertexShader = stpVs;\n        doRotate = false;\n        geometryX = 5.6;\n        geometryY = 3;\n        break;\n    }\n\n    case 'ed209': {\n        fragmentShader = edFs;\n        vertexShader = edVs;\n        doRotate = false;\n        geometryX = 5.12;\n        geometryY = 2.88;\n        break;\n    }\n\n    case 'indercial': {\n        fragmentShader = inFs;\n        vertexShader = edVs;\n\n        doRotate = true;\n        geometryX = 5.12;\n        geometryY = 2.88;\n        break;\n    }\n\n}\n\n\n\nconst loader = new THREE.TextureLoader();\n\n\nconst container = ref(null);\n\nconst uniforms = {\n\n    u_time: { value: 0.0 },\n    u_mouse: {\n        value: {\n            x: 0.0,\n            y: 0.0\n        }\n    },\n    u_resolution: {\n        value: {\n            x: 0.0,\n            y: 0.0\n        }\n    },\n    u_color: {\n        value: new THREE.Color(0x00fff0)\n    },\n    u_frame: {\n        type: \"i\",\n        value: -1.\n    },\n    iChannel0: { type: 't', value: '' },\n    iChannel1: { type: 't', value: '' },\n};\n\nconst clock = new THREE.Clock();\n\nlet sketch = new Sketch();\n\nsketch.animate = function () {\n    // this.mesh.rotation.x += this.time / 1000;\n    // this.mesh.rotation.y += this.time / 1000;\n    this.render();\n    uniforms.u_time.value = clock.getElapsedTime();\n    uniforms.u_frame.value++;\n\n    if (this.container.getBoundingClientRect().width > 0)\n        requestAnimationFrame(this.animate.bind(this));\n    else return;\n};\nsketch.move = function (evt: any) {\n    uniforms.u_mouse.value.x = evt.touches ? evt.touches[0].clientX : evt.clientX;\n    uniforms.u_mouse.value.y = evt.touches ? evt.touches[0].clientY : evt.clientY;\n};\n\nif ('ontouchstart' in window) {\n    document.addEventListener('touchmove', sketch.move);\n} else {\n    document.addEventListener('mousemove', sketch.move);\n}\n\nsketch.resize = function () {\n    if (uniforms.u_resolution !== undefined) {\n        uniforms.u_resolution.value.x = this.width;\n        uniforms.u_resolution.value.y = this.height;\n    }\n\n    uniforms.u_frame.value = 0;\n\n    this.camera.aspect = this.container.clientWidth / this.container.clientHeight;\n    this.camera.updateProjectionMatrix();\n    this.renderer.setSize(this.container.clientWidth, this.container.clientHeight);\n    this.render();\n\n}\n\nsketch.addObject = function () {\n    this.geometry = new THREE.PlaneGeometry(geometryX, geometryY);\n    this.material = new THREE.ShaderMaterial(\n        {\n            uniforms: uniforms,\n            side: THREE.DoubleSide,\n\n            fragmentShader: fragmentShader,\n            vertexShader: vertexShader,\n        }\n    );\n    this.mesh = new THREE.Mesh(this.geometry, this.material);\n    this.scene.add(this.mesh);\n}\n\nnextTick(() => {\n    const options = {\n        container: container.value || document.body\n    };\n    if (props.type === 'indercial') {\n        try {\n            sketch.init(options);\n        } catch (err) {\n            console.log(err) \n        }\n\n\n        const listener = new THREE.AudioListener();\n        sketch.camera.add(listener);\n        // 创建一个全局 audio 源\n        const sound = new THREE.Audio(listener);\n        // 加载一个 sound 并将其设置为 Audio 对象的缓冲区\n        const audioLoader = new THREE.AudioLoader();\n        audioLoader.load('/note/music/link.mp3', function (buffer) {\n            sound.setBuffer(buffer);\n            console.log(buffer);\n            \n            uniforms.iChannel0.value = buffer;\n            sketch.init(options);\n        });\n    }\n    else\n        loader.load('/note/images/logo.jpg', (texture: any) => {\n            texture.wrapS = THREE.RepeatWrapping;\n            texture.wrapT = THREE.RepeatWrapping;\n            texture.minFilter = THREE.LinearFilter;\n            uniforms.iChannel0.value = texture;\n            uniforms.iChannel1.value = texture;\n            try {\n                sketch.init(options);\n            } catch (err) {\n                console.log(err)\n            }\n        })\n\n})\n\nonUnmounted(() => {\n    sketch.beforeDestroy();\n})\n\n</script>"],"names":["props","__props","fragmentShader","vertexShader","geometryX","geometryY","ikunFs","ikunVs","waveFs","waveVs","cityFs","cityVs","priFs","priVs","stpFs","stpVs","edFs","edVs","inFs","loader","THREE.TextureLoader","container","ref","uniforms","THREE.Color","clock","THREE.Clock","sketch","Sketch","evt","THREE.PlaneGeometry","THREE.ShaderMaterial","THREE.DoubleSide","THREE.Mesh","nextTick","options","err","listener","THREE.AudioListener","sound","THREE.Audio","THREE.AudioLoader","buffer","texture","THREE.RepeatWrapping","THREE.LinearFilter","onUnmounted"],"mappings":"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"}
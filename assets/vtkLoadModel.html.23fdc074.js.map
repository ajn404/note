{"version":3,"mappings":"gMAUA,MACAA,EAEAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACA,gBACAC,UAEAC,MACAC,WACA,QACA,0BACA,cACA,+BACA,GAEA,MACA,aACAC,UACAC,+CACAX,8BACAG,+BACA,yBACAC,2BACAC,2BAEAJ,qCACAK,EACA,gDACAJ,oCAEAU,OACA,aAiDA,kBACA,iBACAC,0BACAC,aACAC,oBAEAD,oBACAC,EACAC,8BAEAA,2BAEAC,GACA,EA7DA,uBACA,sBACA,iDACA,GACAC,kBACAC,sBAIAC,sCACAC,kBACAC,KAGAC,kBACAC,kBACAC,kBACAC,kBACAC,kBAEAC,gBACAX,WA0CAI,EACA,iCACA,UACAD,EACA,iCACA,UACA,mCACA,qBACA,2BACAS,qBACAC,kBACAhB,kBAEAA,eACAgB,kBAEAT,4BACAH,cAEAI,4CACA,CACAM,IACAX,IAGA,SACA,uHACA,EACAK,kBACAS,OACA,8DACA,CACA,GAEAC;AAAA,IACA,4CACA,4BACA,aACAhB,WACA,CACA,EACA,GAGAT,SACA,qBACA,eACA,WACA,SACA,SACA,eACA,cACA,cACA,YACA,CACA,CACA,EACA,EAEA,cACA0B,IACAvB,MACA,WAOAwB,IALAC,qEAEAD,GACA,GAKA,GAEAE,OACA,eACA,MACA,qBACA,eACA,WACA,SACA,SACA,eACA,cACA,cACA,YACA,UAEAlB,WACAK,WACAC,WACAC,WACAC,WACAC,WACAP,WAIAD,WACA,8CACAa,WACAzB,YACA,CACA","names":["vtkActor","vtkSphereMapper","vtkStickMapper","vtkMapper","vtkMTLReader","vtkOBJReader","vtkMoleculeToRepresentation","context","loading","ElLoading","loadInstance","vtkFullScreenRenderWindow","nextTick","index","actor","visibility","el","render","renderer","renderWindow","reader","materialsReader","scene","filter","sphereMapper","stickMapper","sphereActor","stickActor","resetCamera","name","mapper","htmlBuffer","fullScreenRenderer","isClient","loadModel","__vitePreload","onBeforeUnmount"],"sources":["../../../components/vtk/vtkLoadModel.vue"],"sourcesContent":["<template>\n    <div class=\"pdr-reader\">\n        <div class=\"vtk-container\" ref=\"vtkContainer\" />\n    </div>\n</template>\n    \n<script setup>\nimport { ref, onMounted, onBeforeUnmount, nextTick } from \"vue\";\nimport { isClient } from \"@vueuse/core\";\nimport { ElLoading } from \"element-plus\";\nlet vtkFullScreenRenderWindow,\n    vtkActor,\n    vtkPDBReader,\n    vtkSphereMapper,\n    vtkStickMapper,\n    vtkMapper,\n    vtkMTLReader,\n    vtkOBJReader,\n    vtkMoleculeToRepresentation;\nconst vtkContainer = ref(null);\nconst context = ref(null);\n\nconst loading = () => {\n    return ElLoading.service({\n        lock: true,\n        text: \"加载中\",\n        fullscreen: true,\n        background: \"rgba(0, 0, 0, 0.7)\",\n    });\n};\nlet loadInstance;   \nconst loadModel = () => {\n    loadInstance.close()    \n    vtkFullScreenRenderWindow = vtk.Rendering.Misc.vtkFullScreenRenderWindow;\n    vtkActor = vtk.Rendering.Core.vtkActor;\n    vtkMapper = vtk.Rendering.Core.vtkMapper\n    vtkPDBReader = vtk.IO.Misc.vtkPDBReader;\n    vtkMTLReader = vtk.IO.Misc.vtkMTLReader;\n    vtkOBJReader = vtk.IO.Misc.vtkOBJReader;\n\n    vtkSphereMapper = vtk.Rendering.Core.vtkSphereMapper;\n    vtkMoleculeToRepresentation =\n        vtk.Filters.General.vtkMoleculeToRepresentation;\n    vtkStickMapper = vtk.Rendering.Core.vtkStickMapper;\n\n    nextTick(() => {\n        if (!context.value) {\n            const fullScreenRenderer = vtkFullScreenRenderWindow.newInstance({\n                rootContainer: vtkContainer.value,\n                background: [1,192/255,203/255],\n            });\n            const renderer = fullScreenRenderer.getRenderer();\n            const renderWindow = fullScreenRenderer.getRenderWindow();\n\n            \n            \n            const reader = vtkOBJReader.newInstance({ splitMode: 'usemtl' });\n            const materialsReader = vtkMTLReader.newInstance();\n            const scene = [];\n\n\n            const filter = vtkMoleculeToRepresentation.newInstance();\n            const sphereMapper = vtkSphereMapper.newInstance();\n            const stickMapper = vtkStickMapper.newInstance();\n            const sphereActor = vtkActor.newInstance();\n            const stickActor = vtkActor.newInstance();\n\n            const resetCamera = renderer.resetCamera;\n            const render = renderWindow.render;\n\n            // filter.setInputConnection(reader.getOutputPort());\n            // filter.setHideElements([\"H\"]);\n\n            // // render sphere\n            // sphereMapper.setInputConnection(filter.getOutputPort(0));\n            // sphereMapper.setScaleArray(filter.getSphereScaleArrayName());\n            // sphereActor.setMapper(sphereMapper);\n\n            // // render sticks\n            // stickMapper.setInputConnection(filter.getOutputPort(1));\n            // stickMapper.setScaleArray(\"stickScales\");\n            // stickMapper.setOrientationArray(\"orientation\");\n            // stickActor.setMapper(stickMapper);\n\n            // reader.setUrl(`/note/data/2LYZ.pdb`).then(() => {\n            //     renderer.resetCamera();\n            //     renderWindow.render();\n            // });\n\n            // renderer.addActor(sphereActor);\n            // renderer.addActor(stickActor);\n            // renderer.resetCamera();\n            // renderWindow.render();\n\n\nfunction onClick(event) {\n  const el = event.target;\n  const index = Number(el.dataset.index);\n  const actor = scene[index].actor;\n  const visibility = actor.getVisibility();\n\n  actor.setVisibility(!visibility);\n  if (visibility) {\n    el.classList.remove('visible');\n  } else {\n    el.classList.add('visible');\n  }\n  render();\n}\n\nmaterialsReader\n  .setUrl(`/note/model/diaona.mtl`)\n  .then(() => {\n    reader\n      .setUrl(`/note/model/diaona.obj`)\n      .then(() => {\n        const size = reader.getNumberOfOutputPorts();\n        for (let i = 0; i < size; i++) {\n          const polydata = reader.getOutputData(i);\n          const name = polydata.get('name').name;\n          const mapper = vtkMapper.newInstance();\n          const actor = vtkActor.newInstance();\n\n          actor.setMapper(mapper);\n          mapper.setInputData(polydata);\n\n          materialsReader.applyMaterialToActor(name, actor);\n          renderer.addActor(actor);\n\n          scene.push({ name, polydata, mapper, actor });\n        }\n        resetCamera();\n        render();\n\n        // Build control ui\n        const htmlBuffer = [\n          '<style>.visible { font-weight: bold; font-size:1.5em;color:pink} .click { cursor: pointer; min-width: 150px;}</style>',\n        ];\n        scene.forEach((item, idx) => {\n          htmlBuffer.push(\n            `<div class=\"click visible\" data-index=\"${idx}\">${item.name}</div>`\n          );\n        });\n\n        fullScreenRenderer.addController(htmlBuffer.join('\\n'));\n        const nodes = document.querySelectorAll('.click');\n        for (let i = 0; i < nodes.length; i++) {\n          const el = nodes[i];\n          el.onclick = onClick;\n        }\n      });\n  });\n\n\n            context.value = {\n                fullScreenRenderer,\n                renderWindow,\n                renderer,\n                reader,\n                filter,\n                sphereMapper,\n                stickMapper,\n                sphereActor,\n                stickActor,\n            };\n        }\n    });\n}\n\nonMounted(() => {\n    if (isClient) {\n        loadInstance = loading()\n        let vtk = window[\"vtk\"]\n        if (!vtk)\n            import(\"https://unpkg.com/vtk.js@25.1.0/vtk.js\").then(() => {\n\n                loadModel()\n            });\n        else {\n            loadModel()\n        }\n    }\n});\n\nonBeforeUnmount(() => {\n    if (context.value && isClient) {\n        const {\n            fullScreenRenderer,\n            renderWindow,\n            renderer,\n            reader,\n            filter,\n            sphereMapper,\n            stickMapper,\n            sphereActor,\n            stickActor,\n        } = context.value;\n\n        renderer.delete();\n        filter.delete();\n        sphereMapper.delete();\n        stickMapper.delete();\n        sphereActor.delete();\n        stickActor.delete();\n        reader.delete();\n\n        // window.removeEventListener('resize',renderWindow.resize)\n        // renderWindow.unbindEvents()\n        renderWindow.delete();\n        window.removeEventListener(\"resize\", fullScreenRenderer.resize);\n        fullScreenRenderer.delete();\n        context.value = null;\n    }\n});\n</script>\n    \n<style lang=\"scss\" scoped>\n.pdr-reader {\n    overflow: hidden;\n    min-width: 100%;\n    min-height: calc(100vh - 3.6rem);\n\n    :deep(.vtk-container) {\n        position: relative;\n\n        &>div {\n            position: fixed !important;\n            z-index: 1;\n            top: 3.6rem !important;\n        }\n    }\n}\n</style>\n    "],"file":"assets/vtkLoadModel.html.23fdc074.js"}
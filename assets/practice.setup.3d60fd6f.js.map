{"version":3,"file":"practice.setup.3d60fd6f.js","sources":["../../../scripts/practice.setup.ts"],"sourcesContent":["import * as THREE from \"three\";\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\n\ninterface optionsConfig {\n    container: HTMLElement\n}\nexport default class Sketch {\n    time: number;\n    geometry: any;\n    material: any;\n    mesh: any;\n    scene: any;\n    renderer: any;\n    camera: any;\n    container: any;\n    width: any;\n    height: any;\n    control: any;\n\n    init(options: optionsConfig) {\n        this.time = 10;\n        this.container = options.container;\n        this.width = this.container.clientWidth || window.innerWidth;\n        this.height = this.container.clientHeight || window.innerHeight;\n\n        this.scene = new THREE.Scene();\n        this.camera = new THREE.PerspectiveCamera(\n            75,\n            this.width / this.height,\n            0.01,\n            10\n        );\n        this.camera.position.z = 1;\n\n        this.renderer = new THREE.WebGLRenderer({\n            antialias: true,\n            alpha: true,\n        });\n        this.renderer.setSize(this.width, this.height);\n        this.container.appendChild(this.renderer.domElement);\n\n        this.control = new OrbitControls(this.camera, this.renderer.domElement);\n\n        this.resize()\n        addEventListener(\"resize\", this.resize.bind(this), false)\n        this.addObject();\n        this.animate();\n    }\n    /**\n     * \n     * @returns void\n     */\n    animate() {\n        //   this.time += 0.05;\n        this.mesh.rotation.x += this.time / 1000;\n        this.mesh.rotation.y += this.time / 1000;\n        this.render();\n        if (this.container.getBoundingClientRect().width > 0)\n            requestAnimationFrame(this.animate.bind(this));\n        else return;\n    }\n\n    render() {\n        this.renderer.render(this.scene, this.camera);\n    }\n\n    resize() {\n        this.camera.aspect = this.container.clientWidth / this.container.clientHeight;\n        this.camera.updateProjectionMatrix();\n        this.renderer.setSize(this.container.clientWidth, this.container.clientHeight);\n        this.render();\n    }\n\n    addObject() {\n        this.geometry = new THREE.BoxGeometry(0.2, 0.2, 0.2);\n        this.material = new THREE.MeshNormalMaterial();\n        this.material = new THREE.ShaderMaterial(\n            {\n                fragmentShader: `\n                    void main(){\n                        gl_FragColor = vec4(1.0,0.,1,1.);\n                    }\n                `,\n                vertexShader: `\n                void main(){\n                    gl_Position = projectionMatrix * modelViewMatrix * vec4 \n                    (position,1.0);\n                }`\n            }\n        );\n        this.mesh = new THREE.Mesh(this.geometry, this.material);\n        this.scene.add(this.mesh);\n    }\n\n    beforeDestroy() {\n\n        const disposeChild = (mesh: any) => {\n            if (mesh instanceof THREE.Mesh) {\n                if (mesh.geometry?.dispose) {\n                    mesh.geometry.dispose();\n                }\n                if (mesh.material?.dispose) {\n                    mesh.material.dispose();\n                }\n                if (mesh.material?.texture?.dispose) {\n                    mesh.material.texture.dispose();\n                }\n            }\n            if (mesh instanceof THREE.Group) {\n                mesh.clear();\n            }\n            if (mesh instanceof THREE.Object3D) {\n                mesh.clear();\n            }\n        }\n        this.scene.traverse((item: any) => {\n            disposeChild(item);\n        })\n        THREE.Cache.clear();\n        this.scene.clear();\n        this.renderer.dispose();\n        this.renderer.forceContextLoss();\n    }\n}\n\n"],"names":["Sketch","options","THREE.Scene","THREE.PerspectiveCamera","THREE.WebGLRenderer","OrbitControls","THREE.BoxGeometry","THREE.MeshNormalMaterial","THREE.ShaderMaterial","THREE.Mesh","disposeChild","mesh","_a","_b","_d","_c","THREE.Group","THREE.Object3D","item","THREE.Cache"],"mappings":"iHAMA,MAAqBA,CAAO,CAaxB,KAAKC,EAAwB,CACzB,KAAK,KAAO,GACZ,KAAK,UAAYA,EAAQ,UACzB,KAAK,MAAQ,KAAK,UAAU,aAAe,OAAO,WAClD,KAAK,OAAS,KAAK,UAAU,cAAgB,OAAO,YAE/C,KAAA,MAAQ,IAAIC,EACZ,KAAA,OAAS,IAAIC,EACd,GACA,KAAK,MAAQ,KAAK,OAClB,IACA,EAAA,EAEC,KAAA,OAAO,SAAS,EAAI,EAEpB,KAAA,SAAW,IAAIC,EAAoB,CACpC,UAAW,GACX,MAAO,EAAA,CACV,EACD,KAAK,SAAS,QAAQ,KAAK,MAAO,KAAK,MAAM,EAC7C,KAAK,UAAU,YAAY,KAAK,SAAS,UAAU,EAEnD,KAAK,QAAU,IAAIC,EAAc,KAAK,OAAQ,KAAK,SAAS,UAAU,EAEtE,KAAK,OAAO,EACZ,iBAAiB,SAAU,KAAK,OAAO,KAAK,IAAI,EAAG,EAAK,EACxD,KAAK,UAAU,EACf,KAAK,QAAQ,CACjB,CAKA,SAAU,CAKN,GAHA,KAAK,KAAK,SAAS,GAAK,KAAK,KAAO,IACpC,KAAK,KAAK,SAAS,GAAK,KAAK,KAAO,IACpC,KAAK,OAAO,EACR,KAAK,UAAU,sBAAsB,EAAE,MAAQ,EAC/C,sBAAsB,KAAK,QAAQ,KAAK,IAAI,CAAC,MAC5C,OACT,CAEA,QAAS,CACL,KAAK,SAAS,OAAO,KAAK,MAAO,KAAK,MAAM,CAChD,CAEA,QAAS,CACL,KAAK,OAAO,OAAS,KAAK,UAAU,YAAc,KAAK,UAAU,aACjE,KAAK,OAAO,yBACZ,KAAK,SAAS,QAAQ,KAAK,UAAU,YAAa,KAAK,UAAU,YAAY,EAC7E,KAAK,OAAO,CAChB,CAEA,WAAY,CACR,KAAK,SAAW,IAAIC,EAAkB,GAAK,GAAK,EAAG,EAC9C,KAAA,SAAW,IAAIC,EACf,KAAA,SAAW,IAAIC,EAChB,CACI,eAAgB;AAAA;AAAA;AAAA;AAAA,kBAKhB,aAAc;AAAA;AAAA;AAAA;AAAA,kBAKlB,CAAA,EAEJ,KAAK,KAAO,IAAIC,EAAW,KAAK,SAAU,KAAK,QAAQ,EAClD,KAAA,MAAM,IAAI,KAAK,IAAI,CAC5B,CAEA,eAAgB,CAEN,MAAAC,EAAgBC,GAAc,aAC5BA,aAAgBF,KACZG,EAAAD,EAAK,WAAL,MAAAC,EAAe,SACfD,EAAK,SAAS,WAEdE,EAAAF,EAAK,WAAL,MAAAE,EAAe,SACfF,EAAK,SAAS,WAEdG,GAAAC,EAAAJ,EAAK,WAAL,YAAAI,EAAe,UAAf,MAAAD,EAAwB,SACnBH,EAAA,SAAS,QAAQ,WAG1BA,aAAgBK,GAChBL,EAAK,MAAM,EAEXA,aAAgBM,GAChBN,EAAK,MAAM,CACf,EAEC,KAAA,MAAM,SAAUO,GAAc,CAC/BR,EAAaQ,CAAI,CAAA,CACpB,EACDC,EAAY,MAAM,EAClB,KAAK,MAAM,QACX,KAAK,SAAS,UACd,KAAK,SAAS,kBAClB,CACJ"}
{"version":3,"file":"practice.shapingFunction.c7f75382.js","sources":["../../../components/glsl/practice.shapingFunction.vue"],"sourcesContent":["<template>\n    <div class=\"practice_blendingColor fullscreen\" ref=\"container\">\n    </div>\n</template>\n\n<script lang=\"ts\" setup>\nimport Sketch from \"@scripts/practice.setup.ts\";\nimport * as THREE from \"three\";\nimport { ref, nextTick ,onUnmounted ,defineProps } from \"vue\";\nimport fs from '@shaders/practice/shapingFunction/fragment.glsl'\nimport vs from '@shaders/practice/shapingFunction/vertex.glsl'\n\n\n// import varingsFs from '@shaders/practice/blendingColor/varyingFs.glsl';\n// import varingsVs from '@shaders/practice/blendingColor/varyingVs.glsl';\n\nimport rtsFs from '@shaders/practice/rotatingTheShape/fragment.glsl'\nimport rtsVs from '@shaders/practice/rotatingTheShape/vertex.glsl'\n\n\nconst props = defineProps({type:String});\n\nlet fragmentShader : string = fs,vertexShader : string  = vs ;\nswitch(props.type){\n    case \"rts\":{\n        fragmentShader = rtsFs;\n        vertexShader = rtsVs;\n        break;\n    }\n    default:{\n        break;\n    }\n}\nconst container = ref(null);\nconst uniforms = {\n\n    u_time: { value: 0.0 },\n    u_mouse: {\n        value: {\n            x: 0.0,\n            y: 0.0\n        }\n    },\n    u_resolution: {\n        value: {\n            x: 0.0,\n            y: 0.0\n        }\n    },\n    u_color: {\n        value: new THREE.Color(0x00fff0)\n    }\n};\nconst clock = new THREE.Clock();\n\nlet sketch = new Sketch();\nsketch.addObject = function () {\n    this.geometry = new THREE.PlaneGeometry(2, 2);\n    this.material = new THREE.ShaderMaterial(\n        {\n            uniforms: uniforms,\n            side: THREE.DoubleSide,\n\n            fragmentShader: fragmentShader,\n            vertexShader: vertexShader,\n        }\n    );\n    this.mesh = new THREE.Mesh(this.geometry, this.material);\n    this.scene.add(this.mesh);\n};\nsketch.animate = function () {\n    // this.mesh.rotation.x += this.time / 1000;\n    // this.mesh.rotation.y += this.time / 1000;\n    this.render();\n    uniforms.u_time.value = clock.getElapsedTime();\n    if(this.container.getBoundingClientRect().width>0)\n    requestAnimationFrame(this.animate.bind(this));\n    else return;\n    };\nsketch.move = function (evt: any) {\n    uniforms.u_mouse.value.x = evt.touches ? evt.touches[0].clientX : evt.clientX;\n    uniforms.u_mouse.value.y = evt.touches ? evt.touches[0].clientY : evt.clientY;\n};\n\nif ('ontouchstart' in window) {\n    document.addEventListener('touchmove', sketch.move);\n} else {\n    document.addEventListener('mousemove', sketch.move);\n}\n\nsketch.resize = function () {\n    if (uniforms.u_resolution !== undefined) {\n        uniforms.u_resolution.value.x = this.width;\n        uniforms.u_resolution.value.y = this.height;\n    }\n\n    this.camera.aspect = this.container.clientWidth / this.container.clientHeight;\n        this.camera.updateProjectionMatrix();\n        this.renderer.setSize(this.container.clientWidth, this.container.clientHeight);\n        this.render();\n\n\n}\n\nnextTick(() => {\n    const options = {\n    container: container.value || document.body\n    };\n    sketch.init(options);\n})\n\nonUnmounted(()=>{\n    sketch.beforeDestroy();\n})\n\n\n\n\n\n</script>"],"names":["props","__props","fragmentShader","fs","vertexShader","vs","rtsFs","rtsVs","container","ref","uniforms","THREE.Color","clock","THREE.Clock","sketch","Sketch","THREE.PlaneGeometry","THREE.ShaderMaterial","THREE.DoubleSide","THREE.Mesh","evt","nextTick","options","onUnmounted"],"mappings":"w9DAoBA,MAAAA,EAAAC,EAEA,IAAAC,EAAAC,EAAAC,EAAAC,EACA,OAAAL,EAAA,UAAa,MAAA,CAELE,EAAAI,EACAF,EAAAG,EACA,KAAA,EAMR,MAAAC,EAAAC,EAAA,IAAA,EACAC,EAAA,CAAiB,OAAA,CAAA,MAAA,CAAA,EAEQ,QAAA,CACZ,MAAA,CACE,EAAA,EACA,EAAA,CACA,CACP,EACJ,aAAA,CACc,MAAA,CACH,EAAA,EACA,EAAA,CACA,CACP,EACJ,QAAA,CACS,MAAA,IAAAC,EAAA,KAAA,CAC0B,CACnC,EAEJC,EAAA,IAAAC,EAEA,IAAAC,EAAA,IAAAC,EACA,OAAAD,EAAA,UAAA,UAAA,CACI,KAAA,SAAA,IAAAE,EAAA,EAAA,CAAA,EACA,KAAA,SAAA,IAAAC,EAA0B,CACtB,SAAAP,EACI,KAAAQ,EACY,eAAAhB,EAEZ,aAAAE,CACA,CACJ,EAEJ,KAAA,KAAA,IAAAe,EAAA,KAAA,SAAA,KAAA,QAAA,EACA,KAAA,MAAA,IAAA,KAAA,IAAA,CAAwB,EAE5BL,EAAA,QAAA,UAAA,CAKI,GAFA,KAAA,OAAA,EACAJ,EAAA,OAAA,MAAAE,EAAA,eAAA,EACA,KAAA,UAAA,sBAAA,EAAA,MAAA,EACA,sBAAA,KAAA,QAAA,KAAA,IAAA,CAAA,MACK,OAAA,EAETE,EAAA,KAAA,SAAAM,EAAA,CACIV,EAAA,QAAA,MAAA,EAAAU,EAAA,QAAAA,EAAA,QAAA,GAAA,QAAAA,EAAA,QACAV,EAAA,QAAA,MAAA,EAAAU,EAAA,QAAAA,EAAA,QAAA,GAAA,QAAAA,EAAA,OAAsE,EAG1E,iBAAA,OACI,SAAA,iBAAA,YAAAN,EAAA,IAAA,EAEA,SAAA,iBAAA,YAAAA,EAAA,IAAA,EAGJA,EAAA,OAAA,UAAA,CACIJ,EAAA,eAAA,SACIA,EAAA,aAAA,MAAA,EAAA,KAAA,MACAA,EAAA,aAAA,MAAA,EAAA,KAAA,QAGJ,KAAA,OAAA,OAAA,KAAA,UAAA,YAAA,KAAA,UAAA,aACI,KAAA,OAAA,yBACA,KAAA,SAAA,QAAA,KAAA,UAAA,YAAA,KAAA,UAAA,YAAA,EACA,KAAA,OAAA,CAAY,EAKpBW,EAAA,IAAA,CACI,MAAAC,EAAA,CAAgB,UAAAd,EAAA,OAAA,SAAA,IACuB,EAEvCM,EAAA,KAAAQ,CAAA,CAAmB,CAAA,EAGvBC,EAAA,IAAA,CACIT,EAAA,cAAA,CAAqB,CAAA"}
{"version":3,"mappings":"sLAUA,MACAA,EACAC,EACAC,EACAC,EACAC,EACA,gBACAC,UAEAC,MACAC,WACA,QACA,0BACA,cACA,+BACA,GAEA,MACA,aACAC,aACAC,+CACAT,8BACAC,2BACAC,qCACAE,EACA,gDACAD,oCAEAO,OACA,aACA,uBACA,qBACA,GACAC,kBACAC,sBAEAC,kBACAC,kBACAC,kBACAC,kBACAC,kBACAC,kBAEAJ,wCACAA,yBAGAC,yCACAA,6CACAE,eAGAD,yCACAA,+BACAA,qCACAE,eAEAL,0CACAF,gBACAC,UACA,GAEAD,cACAA,cACAA,gBACAC,WAEAP,SACA,qBACA,eACA,WACA,SACA,SACA,eACA,cACA,cACA,YACA,CACA,CACA,EACA,EAEA,cACAc,IACA,WASAC,KAPAZ,MACAa,qEACAD,GACA,IAOA,GAEAE,OACA,eACA,MACA,qBACA,eACA,WACA,SACA,SACA,eACA,cACA,cACA,YACA,UAEAX,WACAG,WACAC,WACAC,WACAC,WACAC,WACAL,WAIAD,WACA,8CACAW,WACAlB,YACA,CACA","names":["vtkActor","vtkPDBReader","vtkSphereMapper","vtkStickMapper","vtkMoleculeToRepresentation","context","loading","ElLoading","loadInstance","vtkFullScreenRenderWindow","nextTick","renderer","renderWindow","reader","filter","sphereMapper","stickMapper","sphereActor","stickActor","isClient","loadPdr","__vitePreload","onBeforeUnmount","fullScreenRenderer"],"sources":["../../../components/vtk/vtkPdrReader.vue"],"sourcesContent":["<template>\n  <div class=\"pdr-reader\">\n    <div class=\"vtk-container\" ref=\"vtkContainer\" />\n  </div>\n</template>\n  \n<script setup>\nimport { ref, onMounted, onBeforeUnmount, nextTick } from \"vue\";\nimport { isClient } from \"@vueuse/core\";\nimport { ElLoading } from \"element-plus\";\nlet vtkFullScreenRenderWindow,\n  vtkActor,\n  vtkPDBReader,\n  vtkSphereMapper,\n  vtkStickMapper,\n  vtkMoleculeToRepresentation;\nconst vtkContainer = ref(null);\nconst context = ref(null);\n\nconst loading = () => {\n  return ElLoading.service({\n    lock: true,\n    text: \"加载中\",\n    fullscreen: true,\n    background: \"rgba(0, 0, 0, 0.7)\",\n  });\n};\nlet loadInstance;\nconst loadPdr = () => {\n  if (loadInstance) loadInstance.close()\n  vtkFullScreenRenderWindow = vtk.Rendering.Misc.vtkFullScreenRenderWindow;\n  vtkActor = vtk.Rendering.Core.vtkActor;\n  vtkPDBReader = vtk.IO.Misc.vtkPDBReader;\n  vtkSphereMapper = vtk.Rendering.Core.vtkSphereMapper;\n  vtkMoleculeToRepresentation =\n    vtk.Filters.General.vtkMoleculeToRepresentation;\n  vtkStickMapper = vtk.Rendering.Core.vtkStickMapper;\n\n  nextTick(() => {\n    if (!context.value) {\n      const fullScreenRenderer = vtkFullScreenRenderWindow.newInstance({\n        rootContainer: vtkContainer.value,\n      });\n      const renderer = fullScreenRenderer.getRenderer();\n      const renderWindow = fullScreenRenderer.getRenderWindow();\n\n      const reader = vtkPDBReader.newInstance();\n      const filter = vtkMoleculeToRepresentation.newInstance();\n      const sphereMapper = vtkSphereMapper.newInstance();\n      const stickMapper = vtkStickMapper.newInstance();\n      const sphereActor = vtkActor.newInstance();\n      const stickActor = vtkActor.newInstance();\n\n      filter.setInputConnection(reader.getOutputPort());\n      filter.setHideElements([\"H\"]);\n\n      // render sphere\n      sphereMapper.setInputConnection(filter.getOutputPort(0));\n      sphereMapper.setScaleArray(filter.getSphereScaleArrayName());\n      sphereActor.setMapper(sphereMapper);\n\n      // render sticks\n      stickMapper.setInputConnection(filter.getOutputPort(1));\n      stickMapper.setScaleArray(\"stickScales\");\n      stickMapper.setOrientationArray(\"orientation\");\n      stickActor.setMapper(stickMapper);\n\n      reader.setUrl(`/note/data/2LYZ.pdb`).then(() => {\n        renderer.resetCamera();\n        renderWindow.render();\n      });\n\n      renderer.addActor(sphereActor);\n      renderer.addActor(stickActor);\n      renderer.resetCamera();\n      renderWindow.render();\n\n      context.value = {\n        fullScreenRenderer,\n        renderWindow,\n        renderer,\n        reader,\n        filter,\n        sphereMapper,\n        stickMapper,\n        sphereActor,\n        stickActor,\n      };\n    }\n  });\n}\n\nonMounted(() => {\n  if (isClient) {\n    let vtk = window[\"vtk\"]\n    if (!vtk) {\n      loadInstance = loading();\n      import(\"https://unpkg.com/vtk.js@25.1.0/vtk.js\").then(() => {\n        loadPdr()\n      });\n    }\n\n    else {\n      loadPdr()\n    }\n  }\n});\n\nonBeforeUnmount(() => {\n  if (context.value && isClient) {\n    const {\n      fullScreenRenderer,\n      renderWindow,\n      renderer,\n      reader,\n      filter,\n      sphereMapper,\n      stickMapper,\n      sphereActor,\n      stickActor,\n    } = context.value;\n\n    renderer.delete();\n    filter.delete();\n    sphereMapper.delete();\n    stickMapper.delete();\n    sphereActor.delete();\n    stickActor.delete();\n    reader.delete();\n\n    // window.removeEventListener('resize',renderWindow.resize)\n    // renderWindow.unbindEvents()\n    renderWindow.delete();\n    window.removeEventListener(\"resize\", fullScreenRenderer.resize);\n    fullScreenRenderer.delete();\n    context.value = null;\n  }\n});\n</script>\n  \n<style lang=\"scss\" scoped>\n.pdr-reader {\n  overflow: hidden;\n  min-width: 100%;\n  min-height: calc(100vh - 3.6rem);\n\n  :deep(.vtk-container) {\n    position: relative;\n\n    &>div {\n      position: fixed !important;\n      z-index: 1;\n      top: 3.6rem !important;\n    }\n  }\n}\n</style>\n  "],"file":"assets/vtkDemo.html.b521ba70.js"}